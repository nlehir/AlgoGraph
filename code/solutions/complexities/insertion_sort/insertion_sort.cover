    1: def verboseprint(var, verbose) -> None:
           """
           For the next exercice it will be more convenient
           to have less output printed, so we use this function.
           """
   53:     if verbose:
   53:         print(var)
       
       
    1: def insertionSort(llist: list, verbose: bool = True) -> int:
           """
           In Python you can modify objects defined
           outside the scope of a function
           if you use methods from their class.
       
           our function will return the number of
           elementary operations performed.
           """
    1:     verboseprint(f"initial list:\n{llist}", verbose)
    1:     counter = 0
    8:     for i in range(1, len(llist)):
    7:         verboseprint("\n--", verbose)
    7:         verboseprint(f"position : {i}", verbose)
       
    7:         temp = llist[i]
               # counter += 1
    7:         verboseprint(f"temp : {temp}", verbose)
       
               # Move elements of llist[0..i-1], that are
               # greater than temp, to one position ahead
               # of their current position
    7:         j = i - 1
   23:         while j >= 0 and temp < llist[j]:
   16:             verboseprint(f"move {llist[j]} to the right", verbose)
   16:             llist[j + 1] = llist[j]
   16:             counter += 1
   16:             j = j - 1
                   # counter += 1
    7:         verboseprint(f"place {temp} in position {j+1}", verbose)
    7:         llist[j + 1] = temp
    7:         counter += 1
    7:         verboseprint(f"new list:\n{llist}", verbose)
    1:     verboseprint(f"{counter} operations performed", verbose)
    1:     return counter
       
       
    1: llist = [10, 2, 11, 17, 5, 3, 12, 1]
    1: insertionSort(llist)
